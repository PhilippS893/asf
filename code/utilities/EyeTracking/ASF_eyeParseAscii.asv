function [results, trialInfo] = ASF_EyeParseAscii(fname, tokens)
%function [results, trialInfo] = ASF_EyeParseAscii(fname, tokens)
%%SEGMENTS EYETRACKING DATA FROM AN ASF EXPERIMENT INTO TRIALS
%%jens.schwar
%[results, trialInfo] = ASF_EyeParseAscii('demo.asc', {'MSG', 'EFIX', 'ESACC'})
%results(1).lines(:)
%[results, trialInfo] = ASF_EyeParseAscii('JVS_MPEH01.asc', {'MSG', 'EFIX', 'ESACC', 'EBLINK'})


%%TO SEE ALL MESSAGES OF THE EXPERIMENT
%%char(results(1).lines{:})
%%TO SEE ALL FIXATION EVENTS OF THE EXPERIMENT
%char(results(2).lines{:})
%%TO PLOT THE EYE TRACES PERTAINING TO TRIAL n OF THE EXPERIMENT
%n=5;
%plot(trialInfo(n).samples(:, 1), trialInfo(n).samples(:, 2:3))
%
%
% trialInfo is a structured array with size (1, nTrials)
% with the fields
%     sacEvents
%     blinkEvents
%     fixEvents
%     trialStart    %START TIME OF TRIAL (IN EYETRACKER TIME)
%     pagVec        %VECTOR OF PAGENUMBERS 
%     pageOnset     %VECTOR OF PAGE ONSET TIMES (IN EYETRACKER TIME)
%     trialEnd      %END TIME OF TRIAL (IN EYETRACKER TIME)
%     samples       %ALL SAMPLES FROM START TO END [TIME, X, Y]
%     pupilArea     %PUPIL AREA FROM START TO END


fprintf(1, 'SEARCHING %s for the following tokens:\n', fname);
fprintf(1, '%s\n', tokens{:})

nTokens = length(tokens);

for iToken = 1:nTokens
    results(iToken).token = tokens{iToken};
    results(iToken).nFound = 0;
    results(iToken).lines = [];
end


fid = fopen(fname);
iLine = 0;
fprintf(1, 'LINE %06d', iLine)
sampleNo = 0;

%OPEN FILE TO STORE SAMPLES
[strPath, strName] = fileparts(fname);
fNameSample = [strName, '.s'];
fidSample = fopen(fNameSample, 'wt');

while 1
    tline = fgetl(fid);
    if ~ischar(tline), break, end
    iLine = iLine + 1;
    if(mod(iLine, 1000) == 0)
        fprintf(1, '\b\b\b\b\b\b%06d', iLine)
    end
    
    if ~isempty(str2num( strtok(tline)))
        %WE HAVE A SAMPLE
        sampleNo = sampleNo + 1;
        thisSample = sscanf(tline, '%f')';
        l = length(thisSample);
        if l<4
            thisSample(l+1:4) = NaN;
        end
        fprintf(fidSample, '%.3f\t', thisSample);
        fprintf(fidSample, '\n');
        
        %sample(sampleNo, :) = sscanf(tline, '%f')';
    else
        for iToken = 1:nTokens
            tmp = strfind(tline, results(iToken).token);
            if not(isempty(tmp))
                results(iToken).nFound = results(iToken).nFound + 1;
                results(iToken).lines{results(iToken).nFound} = tline;
                %display(results(iToken).lines(results(iToken).nFound))
            end
        end
    end
end
fprintf(1, '\n\n');
%results.samples = sample;
fclose(fidSample);
fclose(fid);

%TRIAL BY TRIAL PARSING OF IMPORTANT MESSAGES FROM ASF
%TRIALSTART
%TRIALEND
%PAGE
msgToken = find(ismember({results.token}, 'MSG'));
trialNum = 0;
pageCount = 0;
for i = 1:results(msgToken).nFound
    thisLine = results(msgToken).lines{i};
    if findstr(thisLine, 'TRIALSTART')
        trialNum = trialNum + 1;
        pageCount = 0;
        sacCount = 0;
        trialInfo(trialNum).sacEvents = [];
        trialInfo(trialNum).blinkEvents = [];
        trialInfo(trialNum).fixEvents = [];
        
        [dummy, rmdr]  = strtok(thisLine);
        [t, rmdr]  = strtok(rmdr);
        trialInfo(trialNum).trialStart = str2num(t);
    end
    
    if findstr(thisLine, 'TRIALEND')
        [dummy, rmdr]  = strtok(thisLine);
        [t, rmdr]  = strtok(rmdr);
        trialInfo(trialNum).trialEnd = str2num(t);
    end
    
    if findstr(thisLine, 'PAGE')
        pageCount = pageCount + 1;
        [dummy, rmdr]  = strtok(thisLine);
        [t, rmdr]  = strtok(rmdr);
        [dummy, rmdr]  = strtok(rmdr);
        [pageNum, rmdr]  = strtok(rmdr);
        
        
        trialInfo(trialNum).pagVec(pageCount)= str2num(pageNum);
        trialInfo(trialNum).pageOnset(pageCount) = str2num(t);
    end
  
end


%TRIAL BY TRIAL PARSING OF OCULOMOTOR EVENTS GENERATED BY EYELINK

%FIXATIONS
msgToken = find(ismember({results.token}, 'EFIX'));
for i = 1:results(msgToken).nFound
    thisLine = results(msgToken).lines{i};
    entries = textscan(thisLine, '%s %s %d %d %d %f %f %d');
    %EBLINK R 1244297	1244394	98
    %EBLINK EYE START END DUR
    thisEye = entries{2};
    fixStart = entries{3};
    fixEnd = entries{4};
    fixDur = entries{5};
    fixPosX = entries{6};
    fixPosY = entries{7};
    
    %FIND CORRESPONDING TRIALNUMBER
    trialNum = find((fixStart > [trialInfo.trialStart]) & (fixStart < [trialInfo.trialEnd]));
    
    if ~isempty(trialNum)
        if isempty(trialInfo(trialNum).fixEvents)
            fixCount = 1;
        else
            fixCount = length(trialInfo(trialNum).fixEvents) + 1;
        end
        
        trialInfo(trialNum).fixEvents(fixCount).eye = thisEye;
        trialInfo(trialNum).fixEvents(fixCount).fixStart = fixStart;
        trialInfo(trialNum).fixEvents(fixCount).fixEnd = fixEnd;
        trialInfo(trialNum).fixEvents(fixCount).fixDur = fixDur;
        trialInfo(trialNum).fixEvents(fixCount).fixPosX = fixPosX;
        trialInfo(trialNum).fixEvents(fixCount).fixPosY = fixPosY;
    end
    
end


%SACCADES
msgToken = find(ismember({results.token}, 'ESACC'));
for i = 1:results(msgToken).nFound
    thisLine = results(msgToken).lines{i};
    [dummy, rmdr]  = strtok(thisLine);
    [thisEye, rmdr]  = strtok(rmdr);
    [sacStart, rmdr]  = strtok(rmdr);
    [sacEnd, rmdr]  = strtok(rmdr);
    [sacDur, rmdr]  = strtok(rmdr);
    [sacPosStartX, rmdr]  = strtok(rmdr);
    [sacPosStartY, rmdr]  = strtok(rmdr);
    [sacPosEndX, rmdr]  = strtok(rmdr);
    [sacPosEndY, rmdr]  = strtok(rmdr);
    [sacAmplitude, rmdr]  = strtok(rmdr);
    [sacPeakvelocity, rmdr]  = strtok(rmdr);
    
    sacStart = str2num(sacStart);
    %FIND CORRESPONDING TRIALNUMBER
    trialNum = find((sacStart > [trialInfo.trialStart]) & (sacStart < [trialInfo.trialEnd]));
    
    if ~isempty(trialNum)
        if isempty(trialInfo(trialNum).sacEvents)
            sacCount = 1;
        else
            sacCount = length(trialInfo(trialNum).sacEvents) + 1;
        end
        
        trialInfo(trialNum).sacEvents(sacCount).eye = thisEye;
        trialInfo(trialNum).sacEvents(sacCount).sacStart = sacStart;
        trialInfo(trialNum).sacEvents(sacCount).sacEnd = str2num(sacEnd);
        trialInfo(trialNum).sacEvents(sacCount).sacDur = str2num(sacDur);
        trialInfo(trialNum).sacEvents(sacCount).sacPosStartX = str2num(sacPosStartX);
        trialInfo(trialNum).sacEvents(sacCount).sacPosStartY = str2num(sacPosStartY);
        trialInfo(trialNum).sacEvents(sacCount).sacPosEndX = str2num(sacPosEndX);
        trialInfo(trialNum).sacEvents(sacCount).sacPosEndY = str2num(sacPosEndY);
        trialInfo(trialNum).sacEvents(sacCount).sacAmplitude = str2num(sacAmplitude);
        trialInfo(trialNum).sacEvents(sacCount).sacPeakvelocity = str2num(sacPeakvelocity);
    end
    
end

msgToken = find(ismember({results.token}, 'EBLINK'));
for i = 1:results(msgToken).nFound
    thisLine = results(msgToken).lines{i};
    entries = textscan(thisLine, '%s %s %d %d %d');
    %EBLINK R 1244297	1244394	98
    %EBLINK EYE START END DUR
    thisEye = entries{2};
    blinkStart = entries{3};
    blinkEnd = entries{4};
    blinkDur = entries{5};
    
    %FIND CORRESPONDING TRIALNUMBER
    trialNum = find((blinkStart > [trialInfo.trialStart]) & (blinkStart < [trialInfo.trialEnd]));
    
    if ~isempty(trialNum)
        if isempty(trialInfo(trialNum).blinkEvents)
            blinkCount = 1;
        else
            blinkCount = length(trialInfo(trialNum).blinkEvents) + 1;
        end
        
        trialInfo(trialNum).blinkEvents(blinkCount).eye = thisEye;
        trialInfo(trialNum).blinkEvents(blinkCount).blinkStart = blinkStart;
        trialInfo(trialNum).blinkEvents(blinkCount).blinkEnd = blinkEnd;
        trialInfo(trialNum).blinkEvents(blinkCount).blinkDur = blinkDur;
    end
    
end


%LOAD SAMPLE
fprintf('Importing samples ...');
sampleDat = importdata(fNameSample);
fprintf('Done.\n')

%GET ALL SAMPLES FOR A GIVEN TRIAL
nTrials = length(trialInfo);
fprintf('Trial %4d', 0);
for i = 1:nTrials
    fprintf('\b\b\b\b%4d', i)
    tStart = trialInfo(i).trialStart;
    tEnd = trialInfo(i).trialEnd;
    cases = find( (sampleDat(:, 1) >= tStart) & (sampleDat(:, 1) <= tEnd) );
    trialInfo(i).samples = sampleDat(cases, 1:3);
    trialInfo(i).pupilArea = sampleDat(cases, 4);
   
end


% if(mod(iLine, 1000) == 0)
%     fprintf(1, '\b\b\b\b\b\b%06d', iLine)
% end
%
% s{iLine} = tline;
% end
% fclose(fid);
% end
%
% % the data (eg, by <textread>)
% % s={
% %     'abc 3456 defg Voltage=2000.1 Time=1e4'
% %     'hijklmTime=60.123 nop12 Voltage=-1.22'
% %     'Current=3.0 Time=-100e-s1 foo'
% %     };
% % ...the tokens
% tok={
%     'MSG'
%     'EFIX'
%     'ESACC='
%     };
% % the engine
% nt=size(tok,1);
% d=cell(nt,1);
% for i=1:nt
%     ctok=tok{i,1};
%     clen=numel(ctok);
%     ix=strfind(s,ctok);
%     d{i,:}=cellfun(@(ss,x)...
%         sscanf(ss(x+clen:end),'%f'),...
%         s,...
%         ix,...
%         'uni',false);
% end
% % the result
% r=cat(2,d{:});
% % ...tabulated #line/token
% format long; % <- may have to reset this!
% r=[[{nan},tok'];[num2cell(1:size(s,1)).',r]]